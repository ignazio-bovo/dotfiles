---
title:	Constant product AMM 
layout:	post
author:	        Ignazio Bovo
---
## AMM formula
Consider two assets X and Y, consider a decentralized liquidity pool containing x amount of X and y amount of Y.
Then x,y at any point in time are bounded by the formula:

 x * y = K    (constant product market maker formula)

K whose unit is X * Y is a constant established at pool creation.
Suppose a trader wanting to sell \Delta y and buy \Delta x. Suppose that x,y (thought as values denominated in USD) are bound by formulas

a. y = f(x) :=  K / x
b. x = g(y) := f^{-1}(y)

Using first order Taylor expansion

f(x - \Delta x) - f(x) = f'(x) * \Delta x + o(\Delta x)  =>  \Delta y \approx f'(x) \Delta x

f'(x) = - K / x^{2}

quantity f'(x) = dy/dx (x) called marginal price (M.P. for short), namely ratio of a infinitesimal variation in y due to the buying of an infinitesimal variation in x.
Equivalently M.P. can be also thought as the ratio of a variation \Delta y due to the buying of \Delta x in a pool with infinite liquidity. Considering that the market can
be assimilated to such pool we can think M.P. to be equivalent of the market exchange rate Y/X. Denote such rate by P.
Hence we have the following system of equations to which x,y must obey at any point in time:

x * y = K   and   y / x \approx M.P. = P   (AMM eqns)

by integrating the above approximation from 0 to x (amount of asset X in the pool)

Suppose the trade (sell \Delta y and buy \Delta x) happens at time t. Then after the trade (namely at time u = t + \delta) the quantities of the pool will be updated as

x_u = x_t + \Delta x_t 
y_u = K / x_u   (by constant product MM formula)

Giving the new exchange price MP_u = y_u / x_u. 
  
# Market fees
Suppose the Taylor approximation holds (implying that the trade size is negligible wrt the pool liquidity).
In order to provide incentives for LP the pool charges trader a fee \epsilon > 0 at each trade.
So that a trader willing to sell \Delta x of X: 

\Delta y = f(x - \Delta x * (1 - \epsilon)) - f(x) = f'(x) * \Delta x * (1 - \epsilon)    (using above equations)

Suppose the trade happens at time t. Then after the trade (namely at time u = t + \delta) the quantities of the pool will be updated as

x_u = x_t + \Delta x_t * (1 - \epsilon)
y_u = K / x_u   (by constant product MM formula)

Giving the new exchange price MP_u = y_u / x_u. 

## TVL
For a liquidity pool the amount x_t + y_t (denominated in USD) represent the *total value locked* in
the pool at time t, abbreviated as *TLV*.

## Impermanent Loss
Suppose again that Taylor approx holds and we can write: y_t = P_t * x_t for any time t, with P_t exchange price of Y/X at t.
Consider now two points in time t and u > t and imagine two alternative scenarios for a liquidity provider possessing y_t, x_t at time t and
wanting to make a profit at time u. He can choose one of the following two mutually exclusive strategies

a. hodl amount V_t = x_t * P_t + y_t (denominated in units of Y) from time t to time u obtaining V_u[a] = x_t * P_u + y_t
b. deposit amount V_t = x_t * P_t + y_t (denominated in units of Y) into the pool at tie t and take it back at time u obtaining V_u[b] = x_u * P_u + y_u 

The impermanent loss (denominated in unit of Y) is defined as the difference in profit between strategy (b) and strategy (a):

IL(t,u) := V_u[b] - V_u[a] = (x_u * P_u + y_u) - (x_t * P_u + y_t)

Using (AMM eqns) yields:

IL (t,u) =  ((K * P_u)^{1/2} + P_u * (K/P_u)^{1/2} - ( (K * P_t)^{1/2} + P_u * (K/P_t)^{1/2 })

Setting R = P_u / P_t and simplifying gives

IL(t,u) / V_t = 2 * R^{1/2} / (R + 1) - 1

## Price Impact
Suppose now a trader is willing to buy some amount of Y by selling \Delta x to the pool, and the trade size is no longer
negligible wrt pool liquidity available. Suppose the market exchange price is P. He gets \Delta y after the trade, define
price impact as:

PI = \Delta y - P * \Delta x * (1 - \epsilon)

Namely the inaccuracy made by using the first order Taylor expansion. For more see [[id:d1d9cc10-b005-4f00-adae-01e0e5cd694c][price impact]]

## Slippage
Transactions in Ethereum are generated by a user, submitted to be processed by a miner, and finally added on-chain.
Price Slippage is defined as the percentage variation due to trade latency due to current blockchain
conditions, namely:

| trade price at settlement - Price quoted | / (Price quoted) 

Since slippage is not dependent on the DeX used but on external chain conditions, most DeXes allow
their traders to set specific amount of slippage that they can tolerate (usually 2% or 3%) i.e.
the percentage influence 

One common practice that can influence slippage is front running by other traders:

## Front Running
Consider the following sequential actions by a trader and a front runner
willing to exchange X for Y in a DeX:

1. Trader sees the quoted price P(t)
2. Trader place the order creating a TX with the smart contract address as recipient
3. Order is added to the transaction queue in the nodes wishing to build a block with that transaction
4. Front runner sees the quoted price P(t) and he also wants to exchange X for Y in the same DeX.
5. In order to avoid price P variations due to incoming trades (as those made in 1-3) front runner sets high Gas fee
6. Thanks to higher gas fees miners will surely process front runner's TX earlier than trader's TX

The result is that front runner claims more favourable price P(t) than trader who
gets P(t + dt) even though he would be originally be entitlet to price P(t) by having sent his
order earlier.
