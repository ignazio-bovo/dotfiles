extern crate proc_macro;
extern crate syn;
#[macro_use]
extern crate quote;
use proc_macro::{self, TokenStream};
use quote::quote;
use syn::{parse_macro_input, DeriveInput};

use proc_macro::TokenStream;

pub trait ExtrinsicFixture {
    fn call(&self) -> DispatchResult;
    fn call_and_assert(&self, expected_result: DispatchResult) {
        assert_eq!(self.call(), expected_result);
    }
}

#[proc_macro_derive(MyTrait)]
pub fn derive(input: TokenStream) -> TokenStream {
    let DeriveInput { ident, .. } = parse_macro_input!(input);
    let output = quote! {
        impl MyTrait for #ident {}
    };
    output.into()
}
